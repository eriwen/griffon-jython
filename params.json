{"name":"Jython plugin for Griffon","body":"##  Installation\r\nThe current version of the *Jython Plugin* is *0.3*\r\n\r\nTo install just issue the following command within your [Griffon](http://griffon.codehaus.org/) project:\r\n\r\n    griffon install-plugin jython\r\n\r\n##  Usage\r\nYou must place all Jython code under `$appdir/src/jython`, it will be compiled first before any sources available on `griffon-app` or `src/main` which means you can't reference any of those sources from your Jython code, while the Groovy sources can. You will be able to use the [LangBridge Plugin] facilities to communicate with other JVM languages.\r\n\r\nSources placed under `$appdir/src/jython` will generate Java classes available for use within griffon-app.\r\n\r\n__$appdir/src/jython/griffon/JythonGreeter.py__\r\n\r\n```python\r\nfrom org.codehaus.griffon import IGreeter\r\n\r\nclass JythonGreeter(IGreeter):\r\n    def __init__(self):\r\n        pass\r\n\r\n    def greet(self, who, model):\r\n        greeting = 'Hello %s from Jython!' % str(who)\r\n        print greeting\r\n        model.setOutput(greeting)\r\n```\r\n\r\nThis will generate a Java class named `griffon.JythonGreeter`, which can be used inside any Griffon artifact, for example a Controller\r\n\r\n```groovy\r\nimport javax.swing.JOptionPane\r\nimport java.beans.PropertyChangeListener\r\nimport org.codehaus.griffon.IGreeter\r\nimport griffon.jython.JythonObjectFactory\r\n\r\nclass JyAppController {\r\n    def model\r\n    def view\r\n    def greeter\r\n\r\n    def mvcGroupInit(Map args) {\r\n         model.addPropertyChangeListener(\"output\", { evt ->\r\n             if(!evt.newValue) return\r\n             // model.output may have been updated outside EDT\r\n             doLater {\r\n                 JOptionPane.showMessageDialog(app.windowManager.windows[0],\r\n                     evt.newValue, \"Yay for Jython\", JOptionPane.INFORMATION_MESSAGE)\r\n             }\r\n         } as PropertyChangeListener)\r\n\r\n         // Create our JythonGreeter\r\n         JythonObjectFactory factory = new JythonObjectFactory(IGreeter.class, 'JythonGreeter', 'JythonGreeter')\r\n         greeter = (IGreeter) factory.createObject()\r\n     }\r\n\r\n    def handleClick = { evt = null ->\r\n        if(!model.input) return\r\n        // clear the result first\r\n        model.output = \"\"\r\n        // invoke Jython class outside the EDT\r\n        doOutside {\r\n            greeter.greet(model.input, model)\r\n        }\r\n    }\r\n}\r\n```\r\n\r\nYou are also able to load Jython scripts at any time. By default all scripts placed at `$basedir/griffon-app/resources/jython` will be loaded when the application boostraps itself. For example `griffon-app/resources/jython/fib.py` might look like this:\r\n\r\n```python\r\ndef addNumbers(a, b):\r\n    return a + b\r\n```\r\n\r\nWith that code in place, the addNumbers function may be executed as a method call on a dynamic property named `py` from a Griffon controller. See below:\r\n\r\n```groovy\r\nclass FooController {\r\n    def addNumbers = { evt = null ->\r\n       // invoke the function as a method on the 'py' dynamic property\r\n       model.z = py.add_numbers(model.x, model.y)\r\n    }\r\n}\r\n```\r\n\r\nThe dynamic property will be named `py` by default. The name of the property may be set explicitly in `griffon-app/conf/Config.groovy` by assigning a value to the griffon.jython.dynamicPropertyName property.\r\n\r\n    griffon.jython.dynamicPropertyName = 'jythonPropertyName'\r\n\r\nFor most applications, the default name of `py` should be fine. You can also alter in which artifacts the property gets injected, by default only controllers will have that property. See `griffon-app/conf/Config.groovy` and look for the following entry\r\n\r\n    griffon.jython.injectInto = [\"controller\"]\r\n\r\nFinally, you can load any Jython script by calling `pyLoad(String path)` where `path` will be resolved using Spring's PathMatchingResourcePatternResolver. The default path used during bootstrap is `\"classpath*:/jython/\\*``{}*/*{`}`.py\"`. It is also worth mentioning that this method will be injected to all artifacts controlled by `griffon.jython.injectInto` and that the prefix `py` will be affected by `griffon.jython.dynamicPropertyName`.\r\n\r\n\r\n###  Scripts\r\n * *create-jython-class* - creates a new Jython class in `$basedir/src/jython`.\r\n * *create-jython-script* - creates a new Jython script in `$basedir/griffon-app/resources/py`.\r\n * *jython-repl* - executes a Jython REPL with the application's classpath fully configured.\r\n","tagline":"Enables compiling and running Jython code on your Griffon application","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}